I would like to set up a set of exercises that flexes more of a language than 
"Hello World", but isn't so specific as Project Euler. Exercises aren't 100%
the same between languages, but the idea behind each exercise should be
present in each file. 

I'll keep adding new exercises and languages as I have time. Current languages
are Java and Python. Current exercises are generating primes, dropbox 
calories, trees, hello web, and soon random data structures.

Completion:
Lang   Exercises Completed
Java   .
Python ..,
C#     .i .

. = Fully Completed
, = Partially Completed(multiple items in exercise)
i = In Progress (current exercise)

Exercise Descriptions
Generating Primes
Generate primes between a lower and upper bound, expected to handle
flipped lower and upper bounds, invalid ranges, and lower ranges 
that are above the lowest possible prime number.


Dropbox Calories
From www.dropbox.com/jobs/challenges
Help us keep our caloric intake in check. You'll be given a list of 
activities and their caloric impact. Write a program that outputs the 
names of activities a Dropboxer should choose to partake in so that 
the sum of their caloric impact is zero. Once an activity is selected, 
it cannot be chosen again.

Input
Your program reads an integer N (1 <= N <= 50) from STDIN representing 
the number of list items in the test input. The list is comprised of 
activities or food items and its respective calorie impact separated by 
a space, one pair per line. Activity names will use only lowercase 
ASCII letters and the dash (-) character.

Output
Output should be sent to stdout, one activity name per line, alphabetized. 
If there is no possible solution, the output should be no solution. If 
there are multiple solutions, your program can output any one of them. 
Solutions should be non-trivial, so don't send us cat > /dev/null, you 
smart aleck.


Trees
I implement a trie tree, and soon B+ trees.


Hello Web
Each language needs 3 pages, one that will say hello back to you, another that will output 
a table based on a text file, and a user login/welcome page/register page.


Random Data Structures
Implementations of standard randomized data structures, I implement a Bloom
Filter and a Treap.
